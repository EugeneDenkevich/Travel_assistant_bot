from aiogram import types, Dispatcher
from models_client import FarmsteadSearch, CheckingFarm
from aiogram.dispatcher import FSMContext
from keyboards import cancel, is_it_correct
from .aiogram_calendar.simple_calendar import calendar_callback as simple_cal_callback, SimpleCalendar
from mysql_db.mysql_db import BaseWorking as db
from . import search 
from keyboards import Checkbox


async def show_place(callback: types.CallbackQuery):
    await callback.answer()
    await FarmsteadSearch.name.set()
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:', reply_markup=cancel)
    await callback.answer()


async def set_name(message: types.Message, state: FSMContext):
    farm = CheckingFarm(name=message.text, message=message)
    if await farm.check_name():
        async with state.proxy() as data:
            data['name'] = farm.name
        await FarmsteadSearch.adults_number.set()
        await message.answer('–°–∫–æ–ª—å–∫–æ —É –≤–∞—Å –±—É–¥–µ—Ç –≤–∑—Ä–æ—Å–ª—ã—Ö? –î–∞–π—Ç–µ –æ—Ç–≤–µ—Ç —Ü–∏—Ñ—Ä–æ–π:', reply_markup=cancel)


async def set_adult(message: types.Message, state: FSMContext):
    farm = CheckingFarm(value=message.text, message=message)
    if await farm.check_number():
        async with state.proxy() as data:
            data['adults_number'] = farm.value
        await FarmsteadSearch.child_number.set()
        await message.answer('–°–∫–æ–ª—å–∫–æ —É –≤–∞—Å –±—É–¥–µ—Ç –¥–µ—Ç–µ–π (–¥–æ ... –ª–µ—Ç)? –î–∞–π—Ç–µ –æ—Ç–≤–µ—Ç —Ü–∏—Ñ—Ä–æ–π:',
                              reply_markup=cancel)


async def set_child(message: types.Message, state: FSMContext):
    farm = CheckingFarm(value=message.text, message=message)
    if await farm.check_number():
        async with state.proxy() as data:
            data['child_number'] = farm.value
        await FarmsteadSearch.rooms_number.set()
        await message.answer('–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–º–µ—Ä–æ–≤ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è ' +
                             '–≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏? –î–∞–π—Ç–µ –æ—Ç–≤–µ—Ç —Ü–∏—Ñ—Ä–æ–π:', reply_markup=cancel)


async def set_number(message: types.Message, state: FSMContext):
    farm = CheckingFarm(value=message.text, message=message)
    if await farm.check_number():
        async with state.proxy() as data:
            data['rooms_number'] = farm.value
            if 'regions' in data:
                await FarmsteadSearch.budget.set()
                await message.answer('–ö–∞–∫–æ–π —É –≤–∞—Å –¥–∏–∞–ø–∞–∑–æ–Ω –±—é–¥–∂–µ—Ç–∞ –Ω–∞ —Å—É—Ç–∫–∏ –Ω–∞ –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞? ' + 
                                     '–ù–∞–ø—Ä–∏–º–µ—Ä: 50-100 BYN, –¥–æ 50 BYN, –æ—Ç 100 BYN', reply_markup=cancel)
            else:
                await FarmsteadSearch.start_date.set()
                await message.answer('–í –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –æ—Ç–¥—ã—Ö? –í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–Ω—å –∑–∞–µ–∑–¥–∞:',
                                    reply_markup=await SimpleCalendar().start_calendar())


async def set_start_date(callback_query: types.CallbackQuery, callback_data: dict, state: FSMContext):
    selected, date = await SimpleCalendar().process_selection(callback_query, callback_data)
    if selected:
        async with state.proxy() as data:
            data['start_date'] = date.strftime("%d/%m/%Y")
            await FarmsteadSearch.finish_date.set()
            await callback_query.message.delete()
            await callback_query.message.answer(f"–û–∫, –≤—ã –≤—ã–±—Ä–∞–ª–∏ <b><i>{data['start_date']}" +
                                                "</i></b>\n–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–Ω—å –æ—Ç—ä–µ–∑–¥–∞:",
                                                reply_markup=await SimpleCalendar().start_calendar(date=data['start_date']),
                                                parse_mode='html')


async def set_finish_date(callback_query: types.CallbackQuery, callback_data: dict, state: FSMContext):
    selected, date = await SimpleCalendar().process_selection(callback_query, callback_data)
    if selected:
        async with state.proxy() as data:
            data['finish_date'] = date.strftime("%d/%m/%Y")
            farm = CheckingFarm(start_date=data['start_date'],
                                finish_date=data['finish_date'],
                                callback=callback_query)
            if await farm.check_date():
                await callback_query.message.delete()
                if 'budget' in data:
                    box = Checkbox(callback_query, *search.criteria[0], **search.criteria[1])
                    await FarmsteadSearch.criteria.set()
                    await callback_query.message.answer('–î–ª—è –≤–∞—Å –µ—Å—Ç—å 200 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –î–∞–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∑–∏—Ä—É–µ–º –ø–æ–∏—Å–∫.\n' +
                                                        '–í—ã–±–µ—Ä–µ—Ç–µ –≤–∞–∂–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –æ—Ç–¥—ã—Ö–∞?', reply_markup=await box.get_box())
                else:
                    await callback_query.message.answer(
                        f"üìã –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–æ–º/—É—Å–∞–¥—å–±–∞ –≤ <b><i>'{data['name'].capitalize()}'</i></b> " +
                        f"–¥–ª—è <b><i>{data['adults_number']}</i></b> –≤–∑—Ä–æ—Å–ª—ã—Ö, " +
                        f"<b><i>{data['child_number']}</i></b> –¥–µ—Ç–µ–π, " +
                        f"<b><i>{data['rooms_number']}</i></b> –Ω–æ–º–µ—Ä(–æ–≤) " +
                        f"<b><i>{data['start_date']}</i></b> - <b><i>{data['finish_date']}</i></b>.\n" +
                        f"–í—Å—ë –≤–µ—Ä–Ω–æ?", parse_mode='html', reply_markup=is_it_correct) 


async def press_yes(callback: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state == None:
        await callback.answer()
        return
    await callback.answer()
    async with state.proxy() as data:
        await db.add_purchase(data)
        await callback.message.answer(f"‚úÖ –ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Ö–æ–∑—è–∏–Ω—É '{data['name'].capitalize()}' " +
                                      f"–¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.\n–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞./start")
    await state.finish()


def register_handlers(dp: Dispatcher):

    dp.register_callback_query_handler(show_place, text='show_place')
    dp.register_message_handler(set_name, state=FarmsteadSearch.name)
    dp.register_message_handler(set_adult, state=FarmsteadSearch.adults_number)
    dp.register_message_handler(set_child, state=FarmsteadSearch.child_number)
    dp.register_message_handler(set_number, state=FarmsteadSearch.rooms_number)
    dp.register_callback_query_handler(set_start_date, simple_cal_callback.filter(),
                                       state=FarmsteadSearch.start_date) 
    dp.register_callback_query_handler(set_finish_date, simple_cal_callback.filter(),
                                       state=FarmsteadSearch.finish_date) 
    dp.register_callback_query_handler(press_yes, text='add_purchase',
                                       state=FarmsteadSearch.finish_date)
    dp.register_message_handler(search.set_budget, state=FarmsteadSearch.budget)
    dp.register_callback_query_handler(search.set_criteria, Checkbox.call_data.filter(), state=FarmsteadSearch.criteria)